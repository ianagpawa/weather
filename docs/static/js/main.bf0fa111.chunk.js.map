{"version":3,"sources":["actions/API.js","actions/weather.js","reducers/reducers.js","configureStore.js","constants/utils.js","components/Cards.js","components/CurrentWeather.js","components/ForecastWeather.js","components/Home.js","containers/AsyncApp.js","containers/Root.tsx","index.tsx"],"names":["getRequest","params","type","city","units","fetchFunc","fetchSuccessFunc","fetchFailureFunc","dispatch","fetch","getUrl","then","response","json","catch","err","fetchCurrentWeather","fetchCurrentWeatherSuccess","payload","fetchCurrentWeatherFailure","fetchForecastWeather","fetchForecastWeatherSuccess","fetchForecastWeatherFailure","getCurrentWeather","getForecastWeather","rootReducer","combineReducers","currentWeatherDetails","state","action","forecastWeatherDetails","list","filter","weather","indexOf","todayForecastWeatherDetails","slice","loggerMiddleware","createLogger","getFormattedDate","date","format","moment","getDayName","Cards","this","props","map","day","i","key","dt_txt","temp","parseInt","main","description","url","icon","dayName","hour","dayOrText","className","src","Component","CurrentWeather","name","shortDate","ForecastWeather","Home","href","target","id","AsyncApp","prevProps","preloadedState","connect","bindActionCreators","store","createStore","applyMiddleware","thunkMiddleware","Root","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf0fa111.chunk.js","sourcesContent":["import fetch from 'cross-fetch';\r\n\r\nfunction getUrl(params) {\r\n    const {\r\n        type,\r\n        city,\r\n        units\r\n    } = params;\r\n    return `https://api.openweathermap.org/data/2.5/${type}?q=${city}&units=${units}&appid=8a4604e1c9724c6c163653f91c504862`;\r\n}\r\n\r\nexport const getRequest = (params)  => {\r\n    const {\r\n        type,\r\n        city,\r\n        units,\r\n        fetchFunc,\r\n        fetchSuccessFunc,\r\n        fetchFailureFunc\r\n    } = params;\r\n    return dispatch => {\r\n      dispatch(fetchFunc());\r\n      return fetch(getUrl({type, city, units}))\r\n        .then(response => response.json() )\r\n        .then(json => dispatch(fetchSuccessFunc(json)) )\r\n        .catch(err => dispatch(fetchFailureFunc(err)));\r\n    }\r\n}\r\n","\r\n\r\nimport { getRequest } from './API';\r\n\r\nexport const FETCH_CURRENT_WEATHER = `FETCH_CURRENT_WEATHER`;\r\nexport const FETCH_CURRENT_WEATHER_SUCCESS = `FETCH_CURRENT_WEATHER_SUCCESS`;\r\nexport const FETCH_CURRENT_WEATHER_FAILURE = `FETCH_CURRENT_WEATHER_FAILURE`;\r\nexport const FETCH_FORECAST_WEATHER = `FETCH_FORECAST_WEATHER`;\r\nexport const FETCH_FORECAST_WEATHER_SUCCESS = `FETCH_FORECAST_WEATHER_SUCCESS`;\r\nexport const FETCH_FORECAST_WEATHER_FAILURE = `FETCH_FORECAST_WEATHER_FAILURE`;\r\n\r\nexport function fetchCurrentWeather() {\r\n  return {\r\n    type: FETCH_CURRENT_WEATHER\r\n  };\r\n}\r\n\r\nexport function fetchCurrentWeatherSuccess(payload) {\r\n  return {\r\n    type: FETCH_CURRENT_WEATHER_SUCCESS,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function fetchCurrentWeatherFailure(payload) {\r\n  return {\r\n    type: FETCH_CURRENT_WEATHER_FAILURE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function fetchForecastWeather() {\r\n  return {\r\n    type: FETCH_FORECAST_WEATHER\r\n  };\r\n}\r\n\r\nexport function fetchForecastWeatherSuccess(payload) {\r\n  return {\r\n    type: FETCH_FORECAST_WEATHER_SUCCESS,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function fetchForecastWeatherFailure(payload) {\r\n  return {\r\n    type: FETCH_FORECAST_WEATHER_FAILURE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function getCurrentWeather(\r\n  city = 'New York',\r\n  units = 'imperial'\r\n) {\r\n  const params = {\r\n    type: 'weather',\r\n    city,\r\n    units,\r\n    fetchFunc: fetchCurrentWeather,\r\n    fetchSuccessFunc: fetchCurrentWeatherSuccess,\r\n    fetchFailureFunc: fetchCurrentWeatherFailure\r\n  };\r\n  return getRequest(params);\r\n}\r\n\r\nexport function getForecastWeather(\r\n  city = 'New York',\r\n  units = 'imperial'\r\n) {\r\n  const params = {\r\n    type: 'forecast',\r\n    city,\r\n    units,\r\n    fetchFunc: fetchForecastWeather,\r\n    fetchSuccessFunc: fetchForecastWeatherSuccess,\r\n    fetchFailureFunc: fetchForecastWeatherFailure\r\n  };\r\n  return getRequest(params);\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport {\r\n  FETCH_CURRENT_WEATHER_SUCCESS,\r\n  FETCH_FORECAST_WEATHER_SUCCESS,\r\n} from '../actions/weather';\r\n\r\nfunction currentWeatherDetails(state = {}, action) {\r\n  switch (action.type) {\r\n    case FETCH_CURRENT_WEATHER_SUCCESS:\r\n      return { \r\n        ...state, \r\n        ...action.payload \r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction forecastWeatherDetails(state = [], action) {\r\n  switch (action.type) {\r\n    case FETCH_FORECAST_WEATHER_SUCCESS:\r\n      return [\r\n        ...state,\r\n        ...action.payload.list.filter(weather => {\r\n          // get weather at noon of each day.\r\n            return weather['dt_txt'].indexOf('12:00:00') > -1;\r\n        })\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction todayForecastWeatherDetails(state = [], action) {\r\n  switch (action.type) {\r\n    case FETCH_FORECAST_WEATHER_SUCCESS:\r\n      return [\r\n        ...state,\r\n        ...action.payload.list.slice(0,5)\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  currentWeatherDetails,\r\n  forecastWeatherDetails,\r\n  todayForecastWeatherDetails\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers/reducers'\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport default function configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n  )\r\n}","import moment from \"moment\"\r\n\r\nconst getFormattedDate = (date, format) => { return moment(date).format(format); }\r\nexport const getDayName = (date) => { return getFormattedDate(date, 'dddd'); }\r\nexport const getHour = (date) => { return getFormattedDate(date, 'LT'); }\r\nexport const getShortDate = (date) => { return getFormattedDate(date, 'Do MMM'); }\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { \r\n\tgetDayName,\r\n\tgetHour\r\n } from '../constants/utils';\r\nexport default class Cards extends Component {\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tforecastWeatherDetails,\r\n\t\t\ttodayForecastWeatherDetails\r\n\t\t} =  this.props;\r\n\t\treturn (forecastWeatherDetails || todayForecastWeatherDetails).map((day, i) => {\r\n\t\t\tconst key = forecastWeatherDetails ? `forecast${i}` : `today${i}`;\r\n\t\t\tconst weather = day && day.weather && day.weather[0];\r\n\t\t\tconst { dt_txt } = day;\r\n\t\t\tconst temp = parseInt(day && day.main && day.main.temp);\r\n\t\t\tconst description = weather.main;\r\n\t\t\tconst url = `https://openweathermap.org/img/wn/${weather.icon }@2x.png`;\r\n\t\t\tconst dayName = getDayName(dt_txt);\r\n\t\t\tconst hour = getHour(dt_txt);\r\n\t\t\tconst dayOrText = key.indexOf('forecast') !== -1 ? dayName : hour;\r\n\t\t\treturn (\r\n\t\t\t\t<div key={key} className=\"forecast\">\r\n\t\t\t\t\t<div className=\"forecast-header\">\r\n\t\t\t\t\t\t<div className=\"day\">{dayOrText}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"forecast-content\">\r\n\t\t\t\t\t\t<div className=\"forecast-icon\">\r\n\t\t\t\t\t\t\t<img src={url} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"description\">{description}</div>\r\n\t\t\t\t\t\t<div className=\"degree\">{temp}<sup>o</sup>F</div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nCards.propTypes = {\r\n\tforecastWeatherDetails: PropTypes.array,\r\n\ttodayForecastWeatherDetails: PropTypes.array\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Cards from './Cards';\r\nimport { getDayName, getShortDate } from '../constants/utils';\r\n\r\nexport default class CurrentWeather extends Component {\r\n\tconstructor(props) { super(props); }\r\n  render() {\r\n\t  const {\r\n\t\tcurrentWeatherDetails,\r\n\t\ttodayForecastWeatherDetails\r\n\t  } = this.props;\r\n\t  const temp = parseInt(currentWeatherDetails && currentWeatherDetails.main && currentWeatherDetails.main.temp);\r\n\t  const weather = currentWeatherDetails && currentWeatherDetails.weather && currentWeatherDetails.weather[0];\r\n\t  const url = `https://openweathermap.org/img/wn/${weather && weather.icon }@2x.png`;\r\n\t  const description = weather && weather.main;\r\n\t  const { \r\n\t\t  dt_txt,\r\n\t\t  name,\r\n\t\t} = currentWeatherDetails;\r\n\t  const day = getDayName(dt_txt);\r\n\t  const shortDate = getShortDate(dt_txt);\r\n\r\n\t  return (\r\n\t\t\t<div className=\"forecast-table\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"forecast-container\">\r\n\t\t\t\t\t\t<div className=\"today forecast\">\r\n\t\t\t\t\t\t\t<div className=\"forecast-header\">\r\n\t  \t\t\t\t\t\t\t<div className=\"day\">{day}</div>\r\n\t  \t\t\t\t\t\t\t<div className=\"date\">{shortDate}</div>\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t\t<div className=\"forecast-content\">\r\n\t  \t\t\t\t\t\t\t<div className=\"location\">{name}</div>\r\n\t\t\t\t\t\t\t\t<div className=\"degree\">\r\n\t\t\t\t\t\t\t\t\t<div>{description}</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"num\">{temp}<sup>o</sup>F</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"forecast-icon\">\r\n\t\t\t\t\t\t\t\t\t\t<img src={url} />\r\n\t\t\t\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t{/* <span><img src=\"images/icon-umberella.png\" alt=\"\">20%</span>\r\n\t\t\t\t\t\t\t\t<span><img src=\"images/icon-wind.png\" alt=\"\">18km/h</span>\r\n\t\t\t\t\t\t\t\t<span><img src=\"images/icon-compass.png\" alt=\"\">East</span> */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<Cards \r\n\t\t\t\t\t\t\ttodayForecastWeatherDetails={todayForecastWeatherDetails}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nCurrentWeather.propTypes = {\r\n\tcurrentWeatherDetails: PropTypes.object.isRequired,\r\n\ttodayForecastWeatherDetails: PropTypes.array.isRequired\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Cards from './Cards';\r\n\r\nexport default class ForecastWeather extends Component {\r\n\tconstructor(props) { super(props); }\r\n\trender() {\r\n\t\tconst { forecastWeatherDetails } = this.props;\r\n\t\treturn (\r\n\t\t\t\t<div className=\"forecast-table forecast-div\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<div className=\"forecast-container\">\r\n\t\t\t\t\t\t\t<Cards \r\n\t\t\t\t\t\t\t\tforecastWeatherDetails={forecastWeatherDetails}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n}\r\n\r\nForecastWeather.propTypes = {\r\n\tforecastWeatherDetails: PropTypes.array.isRequired\r\n}\r\n","import React, { Component } from 'react'\r\nimport CurrentWeather from './CurrentWeather';\r\nimport ForecastWeather from './ForecastWeather';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Home extends Component {\r\n\tconstructor(props) { super(props); }\r\n  render() {\r\n\t  const {\r\n\t\tcurrentWeatherDetails,\r\n\t\tforecastWeatherDetails,\r\n\t\ttodayForecastWeatherDetails\r\n\t  } = this.props;\r\n      return (\r\n        <div className=\"site-content\">\r\n\t\t\t<div className=\"site-header\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<a href=\"index.html\" className=\"branding\">\r\n\t\t\t\t\t\t<a href=\"https://github.com/ianagpawa/weather\" target=\"_blank\">\r\n\t\t\t\t\t\t<div className=\"logo-type\">\r\n\t\t\t\t\t\t\t<h1 className=\"site-title\">Weather Forecast</h1>\r\n\t\t\t\t\t\t\t<small className=\"site-description hello\" id=\"hello\">Check out the code</small>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</a>\r\n\r\n\t\t\t\t\t<div className=\"main-navigation\">\r\n\t\t\t\t\t\t<ul className=\"menu\">\r\n\t\t\t\t\t\t\t{/* <li className=\"menu-item current-menu-item\"><a href=\"index.html\">Home</a></li> */}\r\n\t\t\t\t\t\t\t<li className=\"menu-item\"><a href=\"https://ianagpawa.github.io/portfolio/\" target=\"_blank\">Portfolio</a></li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div> \r\n\r\n\t\t\t\t\t<div className=\"mobile-navigation\"></div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<CurrentWeather \r\n\t\t\t\tcurrentWeatherDetails={currentWeatherDetails}\r\n\t\t\t\ttodayForecastWeatherDetails={todayForecastWeatherDetails}\r\n\t\t\t/>\r\n\r\n\t\t\t<ForecastWeather\r\n\t\t\t\tforecastWeatherDetails={forecastWeatherDetails}\r\n\t\t\t/>\r\n\t\t</div>\r\n      );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n\tcurrentWeatherDetails: PropTypes.object,\r\n\tforecastWeatherDetails: PropTypes.array,\r\n\ttodayForecastWeatherDetails: PropTypes.array\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport Home from '../components/Home';\r\nimport {\r\n  getCurrentWeather,\r\n  getForecastWeather\r\n} from '../actions/weather';\r\n\r\nclass AsyncApp extends Component {\r\n  constructor(props) { super(props); }\r\n\r\n  componentDidMount() {\r\n    const { \r\n      getCurrentWeather,\r\n      getForecastWeather\r\n    } = this.props;\r\n    getCurrentWeather();\r\n    getForecastWeather();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) { }\r\n\r\n  render() {\r\n    const { \r\n      currentWeatherDetails,\r\n      forecastWeatherDetails,\r\n      todayForecastWeatherDetails\r\n    } = this.props;\r\n    return (\r\n      <Home \r\n        currentWeatherDetails={currentWeatherDetails}\r\n        forecastWeatherDetails={forecastWeatherDetails}\r\n        todayForecastWeatherDetails={todayForecastWeatherDetails} \r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nAsyncApp.propTypes = {\r\n  currentWeatherDetails: PropTypes.object,\r\n  forecastWeatherDetails: PropTypes.array,\r\n  todayForecastWeatherDetails: PropTypes.array\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { \r\n    currentWeatherDetails, \r\n    forecastWeatherDetails,\r\n    todayForecastWeatherDetails\r\n  } = state;\r\n  return { \r\n    currentWeatherDetails,\r\n    forecastWeatherDetails,\r\n    todayForecastWeatherDetails\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  getCurrentWeather,\r\n  getForecastWeather\r\n}, dispatch)\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AsyncApp)","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from '../configureStore'\r\nimport AsyncApp from './AsyncApp'\r\n\r\nconst store = configureStore()\r\n\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <AsyncApp />\r\n      </Provider>\r\n    )\r\n  }\r\n}","import 'babel-polyfill';\r\n\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\nimport Root from './containers/Root';\r\nimport './index.scss';\r\n\r\nrender(<Root />, document.getElementById('root'))"],"sourceRoot":""}